/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Username
 */
public class ServerTicTocToe extends javax.swing.JFrame {

    /**
     * Creates new form ServerTicTocToe
     */
    public ServerTicTocToe() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start.setText("Start Service");
        start.setActionCommand("start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        stop.setText("Stop Service");
        stop.setActionCommand("stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stop)
                    .addComponent(start))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(start)
                .addGap(18, 18, 18)
                .addComponent(stop)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public ServerSocket serverSocket;
    public Socket s;
    Connection con;
    static ResultSet rs;
    
    static List<Player> clientList = new ArrayList<>();
    
    String queryString_1 = "SELECT * from APP.LAB7 ";
    
    DataInputStream dis;
    
    PrintStream ps;
    
    int id;
    
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
            try {
                serverSocket = new ServerSocket(5006);
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }
             try {
                s = serverSocket.accept();
               // clientList.add(s.getPort());
                //System.out.println(clientList);
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }
        System.out.println("Service Started");
        new Thread(new Runnable() {
            @Override
            public void run() {    
                while (true) {

           try {
                s = serverSocket.accept();
               Player p = new Player();
               p.setId(id++);
               p.setS(s);
              
                clientList.add(p);
               // clientList.add(s.getPort());
                //System.out.println(clientList);
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                dis = new DataInputStream(s.getInputStream());
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps = new PrintStream(s.getOutputStream());
                // ps.println("DoPlay");
              
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }
            String str;
            try {
                str = dis.readLine();
                String[] commands = str.split(",");
                if ("Play".equals(commands[0])) {
                    System.out.println(commands[1]+", "+s.getLocalAddress()+", "+s.isConnected());
                   ps.println("DoPlay," + commands[1]);
                 
//new Play(Integer.parseInt(commands[1]), Integer.parseInt(commands[2]), Integer.parseInt(commands[3]));
                    // clientsList.add(new ChatHandler(s));

                }
            } catch (IOException ex) {
                Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
            }


    }  
            }
        }).start();
    }
    
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        try {
            // TODO add your handling code here:
            // try {
            System.out.println("Service Stopped");
            serverSocket.close();
            ps.close();
            dis.close();
            s.close();
            //s.close();
           
           
        } catch (IOException ex) {
            Logger.getLogger(ServerTicTocToe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerTicTocToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerTicTocToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerTicTocToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerTicTocToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerTicTocToe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables

}


class Player{
    private int id;
    private Socket s;
    char c;

    public char getC() {
        return c;
    }

    public void setC(char c) {
        this.c = c;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public Socket getS() {
        return s;
    }

    public void setS(Socket s) {
        this.s = s;
    }
    
}
//add comment from Github by the admin
//add comment from local repo by tarek
